<?php

/**
 * BaseConference
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $description
 * @property date $startdate
 * @property date $enddate
 * @property string $venue
 * @property string $accomodation
 * @property string $howtofind
 * @property string $location
 * @property string $country
 * @property bigint $series_id
 * @property bigint $user_id
 * @property Series $Series
 * @property Doctrine_Collection $Categories
 * @property sfGuardUser $Creator
 * @property Doctrine_Collection $Attendees
 * @property SearchIndex $Fulltext
 * @property Doctrine_Collection $sfGuardUser
 * @property Doctrine_Collection $DefaultCalendar
 * @property Doctrine_Collection $ConferenceAttendee
 * @property Doctrine_Collection $ConferenceCategory
 * @property Doctrine_Collection $Notification
 * 
 * @method string              getName()               Returns the current record's "name" value
 * @method string              getDescription()        Returns the current record's "description" value
 * @method date                getStartdate()          Returns the current record's "startdate" value
 * @method date                getEnddate()            Returns the current record's "enddate" value
 * @method string              getVenue()              Returns the current record's "venue" value
 * @method string              getAccomodation()       Returns the current record's "accomodation" value
 * @method string              getHowtofind()          Returns the current record's "howtofind" value
 * @method string              getLocation()           Returns the current record's "location" value
 * @method string              getCountry()            Returns the current record's "country" value
 * @method bigint              getSeriesId()           Returns the current record's "series_id" value
 * @method bigint              getUserId()             Returns the current record's "user_id" value
 * @method Series              getSeries()             Returns the current record's "Series" value
 * @method Doctrine_Collection getCategories()         Returns the current record's "Categories" collection
 * @method sfGuardUser         getCreator()            Returns the current record's "Creator" value
 * @method Doctrine_Collection getAttendees()          Returns the current record's "Attendees" collection
 * @method SearchIndex         getFulltext()           Returns the current record's "Fulltext" value
 * @method Doctrine_Collection getSfGuardUser()        Returns the current record's "sfGuardUser" collection
 * @method Doctrine_Collection getDefaultCalendar()    Returns the current record's "DefaultCalendar" collection
 * @method Doctrine_Collection getConferenceAttendee() Returns the current record's "ConferenceAttendee" collection
 * @method Doctrine_Collection getConferenceCategory() Returns the current record's "ConferenceCategory" collection
 * @method Doctrine_Collection getNotification()       Returns the current record's "Notification" collection
 * @method Conference          setName()               Sets the current record's "name" value
 * @method Conference          setDescription()        Sets the current record's "description" value
 * @method Conference          setStartdate()          Sets the current record's "startdate" value
 * @method Conference          setEnddate()            Sets the current record's "enddate" value
 * @method Conference          setVenue()              Sets the current record's "venue" value
 * @method Conference          setAccomodation()       Sets the current record's "accomodation" value
 * @method Conference          setHowtofind()          Sets the current record's "howtofind" value
 * @method Conference          setLocation()           Sets the current record's "location" value
 * @method Conference          setCountry()            Sets the current record's "country" value
 * @method Conference          setSeriesId()           Sets the current record's "series_id" value
 * @method Conference          setUserId()             Sets the current record's "user_id" value
 * @method Conference          setSeries()             Sets the current record's "Series" value
 * @method Conference          setCategories()         Sets the current record's "Categories" collection
 * @method Conference          setCreator()            Sets the current record's "Creator" value
 * @method Conference          setAttendees()          Sets the current record's "Attendees" collection
 * @method Conference          setFulltext()           Sets the current record's "Fulltext" value
 * @method Conference          setSfGuardUser()        Sets the current record's "sfGuardUser" collection
 * @method Conference          setDefaultCalendar()    Sets the current record's "DefaultCalendar" collection
 * @method Conference          setConferenceAttendee() Sets the current record's "ConferenceAttendee" collection
 * @method Conference          setConferenceCategory() Sets the current record's "ConferenceCategory" collection
 * @method Conference          setNotification()       Sets the current record's "Notification" collection
 * 
 * @package    platforms
 * @subpackage model
 * @author     Joerg Basedow <jbasedow@mindworks.de>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseConference extends mwDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('conference');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'notblank' => true,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 65535, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 65535,
             ));
        $this->hasColumn('startdate', 'date', null, array(
             'type' => 'date',
             'notnull' => true,
             ));
        $this->hasColumn('enddate', 'date', null, array(
             'type' => 'date',
             'notnull' => true,
             ));
        $this->hasColumn('venue', 'string', 65535, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 65535,
             ));
        $this->hasColumn('accomodation', 'string', 65535, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 65535,
             ));
        $this->hasColumn('howtofind', 'string', 65535, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 65535,
             ));
        $this->hasColumn('location', 'string', 65535, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 65535,
             ));
        $this->hasColumn('country', 'string', 2, array(
             'type' => 'string',
             'notnull' => true,
             'notblank' => true,
             'default' => 'DE',
             'length' => 2,
             ));
        $this->hasColumn('series_id', 'bigint', null, array(
             'type' => 'bigint',
             ));
        $this->hasColumn('user_id', 'bigint', null, array(
             'type' => 'bigint',
             ));


        $this->index('speed', array(
             'fields' => 
             array(
              0 => 'startdate',
             ),
             ));
        $this->option('orderBy', 'name');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Series', array(
             'local' => 'series_id',
             'foreign' => 'id'));

        $this->hasMany('Category as Categories', array(
             'refClass' => 'ConferenceCategory',
             'local' => 'conference_id',
             'foreign' => 'category_id'));

        $this->hasOne('sfGuardUser as Creator', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('sfGuardUser as Attendees', array(
             'refClass' => 'ConferenceAttendee',
             'local' => 'conference_id',
             'foreign' => 'user_id'));

        $this->hasOne('SearchIndex as Fulltext', array(
             'local' => 'id',
             'foreign' => 'object_id'));

        $this->hasMany('sfGuardUser', array(
             'refClass' => 'DefaultCalendar',
             'local' => 'conference_id',
             'foreign' => 'user_id'));

        $this->hasMany('DefaultCalendar', array(
             'local' => 'id',
             'foreign' => 'conference_id'));

        $this->hasMany('ConferenceAttendee', array(
             'local' => 'id',
             'foreign' => 'conference_id'));

        $this->hasMany('ConferenceCategory', array(
             'local' => 'id',
             'foreign' => 'conference_id'));

        $this->hasMany('Notification', array(
             'local' => 'id',
             'foreign' => 'conference_id'));

        $geographical0 = new Doctrine_Template_Geographical(array(
             ));
        $this->actAs($geographical0);
    }
}